" Vim config - optimized for AWESOMENESS

" Plug
    " Setting up Plug - A minimalist Vim plugin manager
        if empty(glob('~/.vim/autoload/plug.vim'))
            silent !curl -sfLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            autocmd VimEnter * PlugInstall | source ~/.vimrc
        endif
        set nocompatible              " be iMproved, required
        call plug#begin('~/.vim/plugged')

    " Setting up Plug - the vim plugin bundler end

    " Plugs
        " General Vim
            Plug 'scrooloose/nerdtree', { 'on':  ['NERDTreeToggle', 'NERDTreeFind'] }
            Plug 'tpope/vim-fugitive'
            Plug 'tpope/vim-eunuch'
            Plug 'ctrlpvim/ctrlp.vim', { 'on':  'CtrlP' }
            Plug 'tacahiroy/ctrlp-funky', { 'on':  'CtrlPFunky' }
            Plug 'loremipsum'
            Plug 'tkhren/vim-fake'
            Plug 'majutsushi/tagbar'
            Plug 'dkprice/vim-easygrep'
            Plug 'junegunn/gv.vim'
            Plug 'junegunn/vim-emoji'
            Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
            Plug 'SirVer/ultisnips'
            Plug 'scrooloose/syntastic'
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'
            Plug 'Valloric/YouCompleteMe', { 'do' : '~/.vim/plugged/YouCompleteMe/install.py --gocode-completer --tern-completer' }
            Plug 'Raimondi/delimitMate'
            Plug 'mbbill/undotree'
            Plug 'scrooloose/nerdcommenter'
            Plug 'junegunn/vim-easy-align'
            Plug 'tpope/vim-dispatch'
            Plug 'airblade/vim-gitgutter'
            Plug 'editorconfig/editorconfig-vim'
            Plug 'moorereason/vim-markdownfmt', { 'for' : 'markdown' }
        " General Vim end

        " Color Schemes
            Plug 'altercation/vim-colors-solarized'
        " Color Schemes end

        " Python
            "YouCompleteMe got me covered
            Plug 'jmcantrell/vim-virtualenv', { 'for': ['python', 'markdown'] }
        " Python end

        " Web (generic)
            Plug 'hail2u/vim-css3-syntax', { 'for' : ['css', 'markdown'] }
            Plug 'juvenn/mustache.vim', { 'for' : ['mustache', 'markdown'] }
            Plug 'digitaltoad/vim-jade', { 'for' : ['jade', 'markdown'] }
            Plug 'wavded/vim-stylus', { 'for': ['stylus', 'markdown'] }
            Plug 'rstacruz/vim-ultisnips-css', { 'for' : 'css' }

"            Plug 'csscomb/vim-csscomb'
        " Web (generic) end

        " Javascript / node / coffeescript 
            Plug 'moll/vim-node', { 'for' : ['javascript', 'json', 'markdown'] }
            Plug 'kchmck/vim-coffee-script', { 'for' : ['coffee', 'coffeescript', 'markdown'] }
            Plug 'isRuslan/vim-es6', { 'for' : ['javascript', 'json', 'markdown'] }
            Plug 'grvcoelho/vim-javascript-snippets', { 'for' : ['javascript', 'json', 'markdown'] }
        " Javascript / node /coffeescript end

        " Go
            Plug 'fatih/vim-go', { 'for' : ['go', 'markdown'] }
            Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh', 'for' : ['go', 'markdown'] }
        " Go

        " Scala
            Plug 'derekwyatt/vim-scala', { 'for' : 'scala' }
        " Scala End

        " Misc
            Plug 'honza/vim-snippets'
            Plug 'vim-scripts/nginx.vim', { 'for': ['nginx', 'markdown'] }
            Plug 'erikzaadi/vim-ansible-yaml', { 'for' : ['yaml', 'ansible', 'markdown'] }
        " Misc end
    " Plugs end

" Plug end

"Set Vim defaults
    set nobackup
    set noswapfile
    set history=256                " Number of things to remember in history.
    set notimeout
    set ttimeout
    set timeoutlen=50             " Time to wait after ESC (default causes an
    " annoying delay)
    set modeline
    set modelines=5                " default numbers of lines to read for
    set autowrite                  " Writes on make/shell commands
    set autoread
    set lazyredraw
    set hidden                     " The current buffer can be put to the
    " background without writing to disk
    set hlsearch                   " highlight search
    set incsearch                  " show matches while typing
    let g:is_posix = 1             " vim's default is archaic bourne shell,
    set tabstop=4                  " tab size eql 4 spaces
    set softtabstop=4
    set sts=4
    set sw=4
    set expandtab
    " set tw=120
    " set winwidth=120 nice idea, but a bit annoying on small terminalz
    " set winminwidth=120
    set mouse=a "enable mouse in GUI mode
    set mousehide                 " Hide mouse after chars typed
    set showmatch                 " Show matching brackets.
    set novisualbell              " No blinking
    set noerrorbells              " No noise.
    "set cc=121 " Right column
    set encoding=utf8
    set ai "Auto indent
    set wrap "Wrap lines
    set number                    " Line numers
    set shortmess=atTI " Hide enter to continue for external apps - GIT
    set cmdheight=1
    try
        lang en_US
    catch
    endtry
    set background=dark
    set laststatus=2
    set guioptions-=LR
    set wildmode=list:longest,full
    set wildignore+=*.pyc
    set completeopt-=preview
    set listchars=tab:▸\ ,trail:·
    set list

    set spellfile=~/.vim/vim-spell-en.utf-8.add
    set complete+=kspell
    set spelllang=en_us

    "http://vim.wikia.com/wiki/Create_underlines,_overlines,_and_strikethroughs_using_combining_characters
    " modify selected text using combining diacritics
    command! -range -nargs=0 Overline        call s:CombineSelection(<line1>, <line2>, '0305')
    command! -range -nargs=0 Underline       call s:CombineSelection(<line1>, <line2>, '0332')
    command! -range -nargs=0 DoubleUnderline call s:CombineSelection(<line1>, <line2>, '0333')
    command! -range -nargs=0 Strikethrough   call s:CombineSelection(<line1>, <line2>, '0336')

    function! s:CombineSelection(line1, line2, cp)
      execute 'let char = "\u'.a:cp.'"'
      execute a:line1.','.a:line2.'s/\%V[^[:cntrl:]]/&'.char.'/ge'
    endfunction
" Vim defaults end

" Keymaps
    let mapleader = "\<Space>""
    map <silent> <F2> :NERDTreeToggle<CR>
    map <silent> <F5> :NERDTreeFind<CR>
    map <silent> <F3> <ESC>:CtrlP<RETURN>
    map <silent> <F4> <ESC>:CtrlPFunky<RETURN>
    nnoremap <Leader>w :w<CR>
    nnoremap <Leader>o :CtrlP<CR>
    vmap <Enter> <Plug>(EasyAlign)
    "Oy vei, trying without arrows
""    nnoremap <up> <nop>
""    nnoremap <down> <nop>
""    nnoremap <left> <nop>
""    nnoremap <right> <nop>
""    inoremap <up> <nop>
""    inoremap <down> <nop>
""    inoremap <left> <nop>
""    inoremap <right> <nop>
    map <F1> <Esc>
    map <F6> <Esc> :lnext<CR>
    map <S-F6> <Esc> :lprev<CR>
    map <F8> <Esc> :TagbarToggle<CR>
    map <F12> <Esc> :YcmCompleter GoTo<CR>
    nnoremap <Leader><Leader>h :noh<CR>
    nnoremap <Leader><Leader>r :redraw!<CR>
    nnoremap <A-down> <C-W>+
    nnoremap <A-up> <C-W>-
    nnoremap <A-left> <C-W><
    nnoremap <A-right> <C-W>>
    nnoremap <Leader>o :CtrlP<CR>

    " fugitive git bindings -
    " http://www.reddit.com/r/vim/comments/21f4gm/best_workflow_when_using_fugitive/
    nnoremap <Leader>ga :Git add %:p<CR><CR>
    nnoremap <Leader>gs :Gstatus<CR>
    nnoremap <Leader>gc :Gcommit -v -q<CR>
    nnoremap <Leader>gd :Gdiff<CR>
    nnoremap <Leader>gp :Ggrep<Space>
    nnoremap <Leader>gm :Gmove<Space>
    nnoremap <Leader>gb :Git branch<Space>
    nnoremap <Leader>go :Git checkout<Space>
    nnoremap <Leader>gps :Dispatch! git push<CR>
    nnoremap <Leader>gpl :Dispatch! git pull<CR>
    map q: :q
    nmap <silent>  <Leader>;  :next $MYVIMRC<CR>
" Keymaps end

" Filetype overrides
     " Python
        au BufNewFile,BufRead *.py set shiftwidth=4 tabstop=4 softtabstop=4
        au FileType python set shiftwidth=4 tabstop=4 softtabstop=4
     " Python End

     " Javascript / Coffeescript / Node
        au BufNewFile,BufRead *.coffee set filetype=coffee
        "au! BufRead,BufNewFile *.json set filetype=json 
        au BufRead,BufNewFile *.ejs set filetype=html
        au BufRead,BufNewFile *.eco set filetype=html
        au BufNewFile,BufRead *.coffee,*.js set shiftwidth=2 tabstop=2 softtabstop=2
        au FileType javascript,coffee set softtabstop=2 tabstop=2 shiftwidth=2
    " Javascript / Coffeescript / Node end

    " Web
        au BufNewFile,BufRead *.less set filetype=less
        au BufRead,BufNewFile *.jade set filetype=jade
        au BufNewFile,BufRead *.styl set filetype=stylus
        au BufNewFile,BufRead *.stylus set filetype=stylus
        au FileType jade,stylus set softtabstop=2 tabstop=2 shiftwidth=2
    " Web end

    " Java 
        au BufNewFile,BufRead *.java set tags=$PWD/.tags
    " Java end

    " Misc
        au BufNewFile,BufRead *tmux.conf set filetype=tmux
        au BufNewFile,BufRead *.pp set filetype=puppet
        autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])
        au BufNewFile,BufReadPost *.md set filetype=markdown
        let g:markdown_fenced_languages = ['coffee', 'css', 'erb=eruby', 'javascript', 'js=javascript', 'json=javascript', 'ruby', 'sass', 'xml', 'html', 'stylus', 'python', 'go', 'yaml', 'ansible', 'nginx', 'sh', 'bash=sh', 'zsh']
        " Spell-check Markdown files
        autocmd FileType markdown setlocal spell
        " Spell-check Git messages
        autocmd FileType gitcommit setlocal spell
        au BufNewFile,BufRead *.yaml set filetype=yaml.ansible
        au FileType markdown nmap <leader>s :<C-u>call markdownfmt#Format()<CR>
    " Misc end
 " Filetype overrides end

" Vim Plug Configs
    let g:plug_timeout                   = 180
    let NERDTreeShowHidden               = 1
    let NERDTreeIgnore                   = ['\.pyc$','\.swp$']                 "ignore compiled python files
    let g:syntastic_ignore_files         = ['\.py$']
    let NERDTreeMouseMode                = 3
    let g:syntastic_yaml_checkers        = ['jsyaml']
    let g:syntastic_go_checkers          = ['golint', 'govet', 'errcheck']
    let g:go_fmt_command                 = "goimports"
    let g:syntastic_check_on_open        = 0
    let g:syntastic_auto_loc_list        = 1
    let g:syntastic_javascript_checkers  = ['jshint']
    let g:syntastic_enable_signs         = 1
    let g:syntastic_scala_checkers       = ['']
    let g:syntastic_mode_map             = { 'mode': 'passive',
                                    \ 'active_filetypes': ['javascript', 'ansible', 'go'],
                                    \ 'passive_filetypes': ['java', 'scala'] }
    let g:airline_powerline_fonts        = 1
    let g:airline_theme                  = 'solarized'
    let g:UltiSnipsUsePythonVersion      = 2
    let g:ycm_add_preview_to_completeopt = 0
    let g:ycm_confirm_extra_conf         = 0
    let g:UltiSnipsSnippetsDir           = "~/.vim/plugged/vim-snippets/UltiSnips/"
    let g:UltiSnipsExpandTrigger         = "<c-f>"
    let g:used_javascript_libs           = 'underscore,angularjs,chai,jquery'
    let g:netrw_liststyle                = 3
    let g:delimitmate_expand_cr          = 2
    let g:markdownfmt_command            = 'mdfmt'
    let g:EasyGrepFilesToExclude         = '*.swp,*~,.git/*,node_modules/*'

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    set completefunc+=emoji#complete
    set omnifunc+=emoji#complete

    call plug#end()
    colorscheme solarized
    call togglebg#map("<F7>")

" Vim Plug Configs end
