" Vim config - optimized for Python, Node and a bit of C#

" Vundle
    " Setting up Vundle - the vim plugin bundler
        let iCanHazVundle=1
        let vundle_readme=expand("~/.vim/bundle/vundle/README.md")
        if !filereadable(vundle_readme) 
        "if !isdirectory("~/.vim/bundle/vundle")
            echo "Installing Vundle.."
            echo ""
            silent !mkdir -p ~/.vim/bundle
            silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
            let iCanHazVundle=0
        endif
        set rtp+=~/.vim/bundle/vundle/
        call vundle#rc()
        Bundle 'gmarik/vundle'

    " Setting up Vundle - the vim plugin bundler end

    " Bundles
        " General Vim
            Bundle 'scrooloose/nerdtree'
            "Bundle 'scrooloose/nerdcommenter'
            Bundle 'https://github.com/tpope/vim-fugitive.git'
            "Bundle 'Command-T'
            Bundle 'kien/ctrlp.vim'
            Bundle 'loremipsum'
            Bundle 'majutsushi/tagbar'
            Bundle 'ZoomWin'
            Bundle 'taglist.vim'
            Bundle 'rosenfeld/conque-term'
            Bundle 'SirVer/ultisnips'
            Bundle 'junegunn/vim-emoji'
            Bundle 'junegunn/vim-github-dashboard'
            Bundle 'scrooloose/syntastic'
            Bundle 'bling/vim-airline'
            "Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
            "Bundle 'terryma/vim-multiple-cursors'
            Bundle 'sjl/gundo.vim'
        " General Vim end
    
        " Color Schemes
            Bundle 'altercation/vim-colors-solarized'
        " Color Schemes end
        
        " Python
            "Bundle 'pytest.vim'
            "Bundle 'klen/python-mode'
            Bundle 'jmcantrell/vim-virtualenv'
            Bundle 'davidhalter/jedi-vim'
            "Bundle 'django.vim'
        " Python end
    
        " Web (generic)
            Bundle 'mattn/emmet-vim'
            Bundle 'mattn/gist-vim'
            Bundle 'HTML-AutoCloseTag'
            Bundle 'juvenn/mustache.vim'
            Bundle 'Rykka/colorv.vim'
            Bundle 'gregsexton/MatchTag'
            Bundle 'wavded/vim-stylus'
            Bundle 'JavaScript-Indent'
            Bundle 'tangledhelix/vim-octopress'
        " Web (generic) end
    
        " Javascript / node / coffeescript 
            "Bundle 'pangloss/vim-javascript'
            "Bundle 'itspriddle/vim-jquery'
            Bundle 'digitaltoad/vim-jade'
            "Bundle 'leshill/vim-json'
            Bundle 'kchmck/vim-coffee-script'
            "Bundle 'walm/jshint.vim'
            Bundle 'mmalecki/vim-node.js'
            "Bundle 'lambdalisue/nodeunit.vim'
        " Javascript / node /coffeescript end
    
        " C# / .Niet
    
        " C# / .Niet end
        
        " Java
        "
        " Java end

        " Scala
"            Bundle 'derekwyatt/vim-scala'
        " Scala End
    
        " Misc
            Bundle 'Puppet-Syntax-Highlighting'
            Bundle 'honza/vim-snippets'
            Bundle 'vim-scripts/nginx.vim'
            " I can haz red pill?
            Bundle 'uguu-org/vim-matrix-screensaver'
            Bundle 'vim-scripts/applescript.vim'
        " Misc end
    " Bundles end
    if iCanHazVundle == 0
        echo "Installing Bundles, please ignore key map error messages"
        echo ""
    :BundleInstall
    endif
" Vundle end

"Set Vim defaults
    set nocompatible               " be iMproved
    set nobackup
    set noswapfile
    set history=256                " Number of things to remember in history.
    set notimeout
    set ttimeout
    set timeoutlen=50             " Time to wait after ESC (default causes an
    " annoying delay)
    set modeline
    set modelines=5                " default numbers of lines to read for
    set autowrite                  " Writes on make/shell commands
    set autoread
    set hidden                     " The current buffer can be put to the
    " background without writing to disk
    set hlsearch                   " highlight search
    set incsearch                  " show matches while typing
    let g:is_posix = 1             " vim's default is archaic bourne shell,
    set tabstop=4                  " tab size eql 4 spaces
    set softtabstop=4
    set sts=4
    set sw=4
    set expandtab
    " set tw=120
    " set winwidth=120 nice idea, but a bit annoying on small terminalz
    " set winminwidth=120
    set autoindent
    set mouse=a "enable mouse in GUI mode
    set mousehide                 " Hide mouse after chars typed
    set showmatch                 " Show matching brackets.
    set novisualbell              " No blinking
    set noerrorbells              " No noise.
    set cc=121 " Right column
    set encoding=utf8
    set ai "Auto indent
    set si "Smart indet
    set wrap "Wrap lines
    set number                    " Line numers
    set shortmess=atTI " Hide enter to continue for external apps - GIT
    set cmdheight=1
    try
        lang en_US
    catch
    endtry
    "set exrc			" enable per-directory .vimrc files
    "set secure         " disable unsafe commands in local .vimrc files

    "http://vim.wikia.com/wiki/Create_underlines,_overlines,_and_strikethroughs_using_combining_characters
    " modify selected text using combining diacritics
    command! -range -nargs=0 Overline        call s:CombineSelection(<line1>, <line2>, '0305')
    command! -range -nargs=0 Underline       call s:CombineSelection(<line1>, <line2>, '0332')
    command! -range -nargs=0 DoubleUnderline call s:CombineSelection(<line1>, <line2>, '0333')
    command! -range -nargs=0 Strikethrough   call s:CombineSelection(<line1>, <line2>, '0336')
    
    function! s:CombineSelection(line1, line2, cp)
      execute 'let char = "\u'.a:cp.'"'
      execute a:line1.','.a:line2.'s/\%V[^[:cntrl:]]/&'.char.'/ge'
    endfunction
" Vim defaults end

" Keymaps
    map <silent> <F2> :silent NERDTreeToggle <CR>
    map <silent> <F3> <ESC>:CtrlP<RETURN>
    "Oy vei, trying without arrows
    "nnoremap <up> <nop>
    "nnoremap <down> <nop>
    "nnoremap <left> <nop>
    "nnoremap <right> <nop>
    "inoremap <up> <nop>
    "inoremap <down> <nop>
    "inoremap <left> <nop>
    "inoremap <right> <nop>
    map <F1> <Esc>
    map <S-F5> <Esc> :setlocal spell spelllang=en_us<CR>
    map <F6> <Esc> :lnext<CR>
    map <S-F6> <Esc> :lprev<CR>
    map <F8> <Esc> :TagbarToggle<CR>
    map <F9> <Esc>:Pytest file<CR>
    map <F10> <Esc> :Pytest method<CR>
" Keymaps end

" Filetype overrides
     " Javascript / Coffeescript / Node
        au BufNewFile,BufRead *.coffee set filetype=coffee
        au! BufRead,BufNewFile *.json set filetype=json 
        au BufRead,BufNewFile *.ejs set filetype=html
        au BufRead,BufNewFile *.eco set filetype=html
        au BufNewFile,BufRead *.coffee set shiftwidth=2
        au FileType javascript set shiftwidth=2
        au BufNewFile,BufRead *.coffee set tabstop=2
        au FileType javascript set tabstop=2
        au BufNewFile,BufRead *.coffee set softtabstop=2
        au FileType javascript set softtabstop=2
    " Javascript / Coffeescript / Node end

    " Web
        au BufNewFile,BufRead *.less set filetype=less
        au BufRead,BufNewFile *.jade set filetype=jade
        au BufNewFile,BufRead *.styl set filetype=stylus
        au BufNewFile,BufRead *.stylus set filetype=stylus
        au! BufWinEnter,bufwritepost *.scss call colorv#preview("S")
        au! BufWinEnter,bufwritepost *.styl call colorv#preview("S")
        au! BufWinEnter,bufwritepost *.less call colorv#preview("S")
        autocmd BufNewFile,BufRead *.markdown setfiletype octopress
    " Web end

    " C# / .NIET
        au BufNewFile,BufRead *.cshtml set filetype=html
        au BufNewFile,BufRead *.master set filetype=html
        au BufNewFile,BufRead *.webconfig set filetype=xml
        au BufNewFile,BufRead *.nuspec set filetype=xml
    " C# / .NIET end

    " Java 
        au BufNewFile,BufRead *.java set tags=$PWD/.tags
    " Java end

    " Scala
        au BufNewFile,BufRead *.scala set filetype=scala
        au BufNewFile,BufRead *.sbt set filetype=scala
    " Scala end

    " Misc
        au BufNewFile,BufRead *tmux.conf set filetype=tmux
        au BufNewFile,BufRead *.pp set filetype=puppet
    " Misc end
 " Filetype overrides end


" Vim Plugin Configs
    set background=dark
    "set t_Co=256
    colorscheme solarized
    "let g:solarized_termcolors=256
    "let g:solarized_termtrans=1
    call togglebg#map("<F5>")
    if has ('gui_running')
    	if has('mac')
    		set gfn=Monaco\ for\ Powerline:h13
    	else 
    		set guifont=Monaco\ for\ Powerline\ 13
    	endif
        set guioptions+=LlRrbmT
        set guioptions-=LlRrbmT
        "set background=light
    "else
    "    colorscheme ir_black
    "    set background=light
    endif
    set laststatus=2
    if has('statusline')
    	" Broken down into easily includeable segments
    	set statusline=%<%f\    " Filename
    	set statusline+=%{fugitive#statusline()} "  Git Hotness
    	set statusline+=\ [%{&ff}/%Y]            " filetype
    	set statusline+=\ [%{getcwd()}]          " current dir
    endif


    let g:user_zen_expandabbr_key = '<C-e>'
    let NERDTreeShowHidden = 1
    let NERDTreeIgnore          =   ['\.pyc$','\.swp$']                 "ignore compiled python files
    set wildignore+=*.pyc
    set wildignore+=**/node_modules
    "let g:syntastic_ignore_files = ['\.py$']
    let NERDTreeMouseMode       =   3    
    "let g:syntastic_python_checkers = ["pylama" , 'flake8', 'pylint']
    let g:syntastic_python_checkers = ['pylint']
    let g:syntastic_check_on_open = 0
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_style_warning_symbol='☔'
    let g:syntastic_style_error_symbol='⚑'
    let g:syntastic_error_symbol='✗'
    let g:syntastic_warning_symbol='⚠'
    "let g:pymode_lint_todo_symbol = 'WW'
    "let g:pymode_lint_comment_symbol = 'CC'
    "let g:pymode_lint_visual_symbol = 'RR'
    "let g:pymode_lint_error_symbol = 'EE'
    "let g:pymode_lint_info_symbol = 'II'
    "let g:pymode_lint_pyflakes_symbol = 'FF'
    "let g:pymode_lint_checker = "pylint"

    let g:syntastic_mode_map = { 'mode': 'active',
                                    \ 'active_filetypes': [],
                                    \ 'passive_filetypes': ['java'] }
    "let g:Powerline_symbols = 'fancy'
    let g:airline_powerline_fonts = 1
    let g:airline_theme='solarized'
    "let g:airline_exclude_preview=1

    let g:jedi#popup_on_dot = 0
    let g:jedi#rename_command = "<S-F12>"
    let g:jedi#goto_assignments_command = "<F12>"
    let g:jedi#use_tabs_not_buffers = 0

    "let g:pymode_virtualenv = 0
    "let g:pymode_folding = 0
    "nmap <F12> :RopeGotoDefinition<CR>
    "nmap <S-F12> :RopeRename<CR>

    let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"
    let g:UltiSnipsJumpForwardTrigger="<tab>"
    "let g:UltiSnips.snipmate_ft_filter = { 'default' : { 'filetypes': ["FILETYPE"] }, }
    "let g:UltiSnips.always_use_first_snippet = 1
    syntax on                      " enable syntax
    filetype plugin indent on " load filetype plugins/indent settings
 

" Vim Plugin Configs end

" Custom functions FTW
    function! g:ToogleNERDTreeLikeAChamp()
        "Opens NERDTree if closed, focus on NERDTree if open
        "and focus on a file or (FINALLY) close when focused on the NERDTree
        if exists("t:NERDTreeBufName")
            if (bufwinnr(t:NERDTreeBufName) != -1)
                :wincmd w
                return
            endif
        endif
        :NERDTreeToggle
    endfunction
" Custom functions FTW end
